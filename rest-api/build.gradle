plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2' // asciidoc
    id 'jacoco' // jacoco test coverage
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtensions
}

repositories {
    mavenCentral()
}
ext {
    set('snippetsDir', file("build/generated-snippets"))
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.modelmapper:modelmapper:3.2.0'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-oauth2-authorization-server
    implementation 'org.springframework.security:spring-security-oauth2-authorization-server:1.2.3'







    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'


    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor' // 이 의존성을 사용하여 snippets으로 문서를 만듬
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.security:spring-security-test'


}
test {
    useJUnitPlatform()
    outputs.dir snippetsDir
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExtensions' // dependencies 안의 이름과 일치해야함
    dependsOn test
}

bootJar {
    dependsOn asciidoctor

    copy {
        from "${asciidoctor.outputDir}"
        into "src/main/resources/static/docs"   // src/main/resources/static/docs로 복사
    }

}